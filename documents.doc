Visão Geral do Projeto: Crypto Trader Pro
1. Introdução
O Crypto Trader Pro é uma plataforma de software completa, desenvolvida em Django, que evoluiu de um painel de controlo manual para um sofisticado sistema de trading de criptomoedas assistido por Inteligência Artificial. O seu core integra-se diretamente com a API da Binance para execução de ordens e recolha de dados de mercado em tempo real, enquanto utiliza a API do Google Gemini como o cérebro estratégico para análise de mercado, geração de sinais e otimização de estratégias.

O objetivo do projeto é fornecer aos utilizadores uma ferramenta robusta que não só permite o controlo total sobre o seu portfólio, mas também oferece uma vantagem competitiva através da automação inteligente.

2. Arquitetura e Tecnologias
A plataforma foi construída sobre uma base de tecnologias modernas e escaláveis, escolhidas para garantir performance, fiabilidade e segurança.

Backend:

Framework: Django 5.x

Linguagem: Python 3.10+

Servidor ASGI/WSGI: Gunicorn / Uvicorn (para produção)

Frontend:

Renderização: Templates Django (Server-Side Rendering)

Estilização: Tailwind CSS

Interatividade: JavaScript, Chart.js (para gráficos), Alpine.js (para reatividade leve)

Base de Dados:

Desenvolvimento: SQLite 3

Produção (Recomendado): PostgreSQL

Tarefas Assíncronas e Agendamento:

Broker de Mensagens: Redis

Processamento de Tarefas: Celery

Agendador (Scheduler): Celery Beat

APIs Externas:

Exchange: API da Binance (suporte para Mainnet e Testnet)

Inteligência Artificial: Google Gemini (modelo gemini-2.0-flash ou superior)

Segurança:

Criptografia de Chaves: Biblioteca cryptography com o algoritmo Fernet e KDF (PBKDF2HMAC) para proteger as chaves de API do utilizador.

3. Estrutura de Módulos (Aplicações Django)
O projeto está organizado em duas aplicações principais para garantir a separação de responsabilidades:

core: O coração da aplicação. Contém os modelos de dados fundamentais (UserProfile, Cryptocurrency, Transaction, Holding), as views para a interface do utilizador (dashboard, páginas de trading manual, relatórios), os formulários e a lógica de interação com a Binance.

trading_agent: O cérebro da automação. Este módulo contém toda a lógica relacionada com o Agente de IA, incluindo:

Modelos de dados para análise (TechnicalAnalysis, MarketSentiment, TradingSignal, BacktestReport).

Tarefas Celery para recolha de dados e para os ciclos de decisão e execução.

Serviços que encapsulam a lógica de comunicação com a API Gemini.

Views e templates para a interface de controlo do agente (Dashboard do Agente, Relatórios de Performance da IA, Backtesting).

4. Fluxo de Decisão do Agente de IA
O agente opera num ciclo contínuo e assíncrono, orquestrado pelo Celery Beat.

Recolha de Dados (a cada 4 horas):

calculate_technical_indicators: Uma tarefa Celery que utiliza a biblioteca pandas-ta para calcular indicadores técnicos (RSI, MACD, Bandas de Bollinger) para todas as criptomoedas e guarda os resultados no modelo TechnicalAnalysis.

analyze_market_sentiment: Uma segunda tarefa que (num futuro próximo) irá consumir notícias de fontes externas, formatar um prompt para o Gemini e pedir uma análise de sentimento, guardando o resultado (score e resumo) no modelo MarketSentiment.

Ciclo de Decisão (a cada hora):

run_trading_cycle_for_all_users: A tarefa principal do "cérebro". Para cada utilizador com o agente ativo, ela:

Recolhe os dados mais recentes de análise técnica e sentimento.

Formata um prompt detalhado para a API Gemini, incluindo o contexto do mercado e o estado atual do portfólio do utilizador.

Recebe a resposta da IA (decisão, confiança, stop-loss, etc.) e guarda-a como um novo TradingSignal com o estado "Pendente".

Ciclo de Execução (a cada hora, 5 minutos após a decisão):

process_unexecuted_signals: Esta tarefa procura por TradingSignal's no estado "Pendente".

Para cada sinal, verifica se o confidence_score é superior ao limiar definido pelo utilizador no seu perfil.

Se for, chama o serviço execute_trade_from_signal, que envia a ordem de compra ou venda para a Binance.

Se a ordem for bem-sucedida, a transação é registada e o sinal é marcado como "Executado".

5. Funcionalidades Implementadas
Gestão de Conta e Segurança:

Autenticação completa (registo, login, logout).

Criação automática de perfil de utilizador.

Página de configurações para chaves de API (criptografadas), moeda preferida e seleção de ambiente (Testnet/Mainnet).

Dashboard e Análise de Portfólio:

Visão consolidada do valor total do portfólio.

Gráficos de distribuição de ativos e histórico de valor.

Tabela de posses com cálculo de Lucro/Prejuízo em tempo real.

Páginas de detalhe de criptomoedas com gráfico histórico.

Sincronização do histórico de transações com a Binance.

Trading Manual:

Execução de ordens a Mercado e a Limite (Compra/Venda).

Visualização e cancelamento de ordens abertas na Binance.

Módulo do Agente de IA:

Controlo Total do Utilizador: O utilizador pode ativar/desativar o agente e configurar os parâmetros de risco (percentagem de capital por compra/venda, limiar de confiança) a qualquer momento.

Dashboard do Agente: Uma tela dedicada para monitorizar o estado do agente, as estatísticas de sinais gerados e o histórico de todas as decisões tomadas pela IA.

Relatórios de Performance da IA: Uma página que analisa e exibe o desempenho financeiro (P/L, Win Rate) apenas das operações executadas pelo agente.

Ferramenta de Backtesting via Interface: Uma página que permite ao utilizador configurar e iniciar simulações de backtesting em segundo plano, com os resultados a serem exibidos numa tabela histórica.

6. Próximos Passos (Roadmap de Evolução)
Com a arquitetura fundamental e a interface do agente prontas, o foco futuro é aprimorar a sua inteligência.

Refinar os Prompts do Gemini: Utilizar os resultados do backtesting para fazer perguntas mais inteligentes à IA, incluindo mais contexto (ex: volatilidade do mercado) ou pedindo para ela escolher entre diferentes estratégias.

Implementar o Ciclo de Aprendizagem: Criar uma "tarefa de reflexão" onde o Gemini analisa a performance passada do agente e sugere melhorias para a sua própria estratégia.

Expandir a Análise de Dados: Integrar novas fontes de dados para enriquecer a análise do agente, como dados on-chain (Glassnode) ou de sentimento de redes sociais.