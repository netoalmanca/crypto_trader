Visão Geral do Projeto: Crypto Trader Pro (Fase 2 - Agente de Trading)

Visão Geral
O "Crypto Trader Pro" é uma aplicação web robusta, construída com Django, projetada para ser um painel completo de gerenciamento e negociação de portfólio de criptomoedas. Nesta segunda fase, o projeto evolui para incluir um Agente de Trading Inteligente, que utiliza a IA generativa do Google Gemini para analisar o mercado e auxiliar na tomada de decisões estratégicas de compra e venda.

Arquitetura e Componentes Principais

Backend: Django

Frontend: Templates Django, Tailwind CSS, Chart.js, Alpine.js

Banco de Dados: SQLite (desenvolvimento), PostgreSQL (recomendado para produção)

Tarefas em Segundo Plano: Celery com Redis para atualização de preços, taxas de câmbio, e para orquestrar o ciclo de análise e decisão do agente de IA.

APIs Externas:

Binance: Conectividade total (Testnet/Mainnet) para dados de mercado e execução de ordens.

Google Gemini: Utilizada como o cérebro estratégico para análise de dados e geração de sinais de trading.

Funcionalidades Concluídas (Fase 1)

Sistema completo de autenticação e perfil de usuário.

Armazenamento seguro de chaves de API com criptografia robusta.

Dashboard analítico com valor de portfólio, distribuição de ativos e histórico de valor.

Execução de ordens manuais (Mercado e Limite) e gerenciamento de ordens abertas.

Sincronização de histórico de transações com a Binance.

Geração de relatórios de performance (ROI, P/L).

Próximos Passos (Fase 2 - Implementação do Agente de Trading)

O foco principal agora é a construção e integração do módulo trading_agent, transformando a plataforma em uma ferramenta de trading semi ou totalmente automatizada.

Passo 1: Construir a Camada de Coleta de Dados (Em Andamento)

O que: Desenvolver e agendar tarefas Celery para coletar e armazenar dados de forma autônoma.

Como:

Análise Técnica: Implementar uma tarefa (calculate_technical_indicators) que utiliza bibliotecas como pandas-ta para calcular e salvar indicadores (RSI, MACD, Bandas de Bollinger) para os principais ativos.

Análise de Sentimento: Criar uma tarefa (analyze_market_sentiment) que consome notícias de fontes externas (ex: NewsAPI), formata um prompt para o Gemini e solicita uma análise de sentimento, salvando o resultado (score e resumo).

Passo 2: Desenvolver o Cérebro do Agente (O Ciclo de Decisão)

O que: Criar o serviço principal que orquestra a análise e a tomada de decisão.

Como:

Implementar uma tarefa Celery principal (execute_trading_cycle) que roda periodicamente.

Esta tarefa irá coletar os últimos dados de análise técnica e sentimento do banco de dados.

Ela irá formatar um prompt detalhado para o Gemini, incluindo o contexto do mercado e o estado atual do portfólio do usuário.

A resposta do Gemini (contendo decisão, confiança, stop-loss, take-profit e justificativa) será salva como um novo objeto TradingSignal no banco de dados.

Passo 3: Criar a Camada de Execução de Ordens

O que: Conectar os sinais gerados pela IA às funções de trading da Binance.

Como: Desenvolver uma função execute_order_from_signal que recebe um TradingSignal. Se o sinal for 'BUY' ou 'SELL' e a confiança for alta, a função irá criar e executar a ordem correspondente na Binance, utilizando a lógica de ajuste de preço e quantidade já existente.

Passo 4: Desenvolver a Interface do Agente de Trading

O que: Criar uma nova seção na interface do usuário para controlar e monitorar o agente.

Como:

Adicionar à página de Configurações (profile/api-keys/) um switch para o usuário ativar ou desativar o enable_auto_trading.

Criar uma nova página (/agent/dashboard/) onde o usuário poderá:

Visualizar o status do agente (ativo/inativo).

Ver uma lista de todos os TradingSignal gerados pela IA, com suas justificativas.

Analisar a performance histórica das decisões do agente.

Passo 5: Implementar o Ciclo de Aprendizado (Otimização Contínua)

O que: Utilizar o histórico de trades para refinar as estratégias do agente.

Como:

Criar um script de backtesting que compara os TradingSignal com os resultados reais das negociações.

Desenvolver uma tarefa periódica de "reflexão", onde o Gemini é consultado sobre a performance passada ("Analisando os últimos 10 trades, a estratégia de stop-loss foi eficiente? Sugira melhorias.") para otimizar os prompts e a lógica futura.